  template:
    # terraform:
    #   backend:
    #     s3:
    #       region: 'us-east-1'
    #       bucket: 'bucket-name'
    #       key: 'path/to/terraform.tfstate'
    resource:
      aws_dax_cluster:
        {{ name }}:
          node_type: var.{{ name }}_node_type
          iam_role_arn: var.{{ name }}_iam_role_arn
          cluster_name: var.{{ name }}_cluster_name
          replication_factor: var.{{ name }}_replication_factor
          # description: ''
          # subnet_group_name: ''
          # tags: 
          #   '[TO_BE_REPLACED]': ''
          # security_group_ids: []
          # availability_zones: []
          # parameter_group_name: ''
          # notification_topic_arn: ''
          # maintenance_window: ''
          # server_side_encryption: 
          #   -
          #     enabled: false
    variable:
      {{ name }}_node_type:
        type: string
      {{ name }}_iam_role_arn:
        type: string
      {{ name }}_cluster_name:
        type: string
      {{ name }}_replication_factor:
        type: int
    output:
      id:
        value: aws_dax_cluster.{{ name }}.id
      thub_id:
        value: aws_dax_cluster.{{ name }}.id
      arn:
        value: aws_dax_cluster.{{ name }}.arn
      subnet_group_name:
        value: aws_dax_cluster.{{ name }}.subnet_group_name
      configuration_endpoint:
        value: aws_dax_cluster.{{ name }}.configuration_endpoint
      security_group_ids:
        value: aws_dax_cluster.{{ name }}.security_group_ids
      parameter_group_name:
        value: aws_dax_cluster.{{ name }}.parameter_group_name
      cluster_address:
        value: aws_dax_cluster.{{ name }}.cluster_address
      nodes:
        value: aws_dax_cluster.{{ name }}.nodes
      maintenance_window:
        value: aws_dax_cluster.{{ name }}.maintenance_window
      port:
        value: aws_dax_cluster.{{ name }}.port
